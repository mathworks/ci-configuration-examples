pool:
  vmImage: ubuntu-latest
variables:
  MATLAB_LOG_DIR: $(Build.SourcesDirectory)/mw_logs
  MW_INSTALLER_DDUX_LOG: $(Build.SourcesDirectory)/mw_logs/mw_installer_ddux.log
  MW_DIAGNOSTIC_DEST: file
  MW_DIAGNOSTIC_SPEC: cppmicroservices::framework.*=all;install.*=all;
  MW_VERBOSE_HTTPCLIENT_CORE: 1
  MW_BATCH_LICENSING_ONLINE: true  # testing online validation, can remove when this becomes the default
steps:
  - task: InstallMATLAB@1
    inputs:
      products: Optimization_Toolbox Curve_Fitting_Toolbox
  - task: RunMATLABTests@1
    inputs:
      sourceFolder: code
      codeCoverageCobertura: code-coverage/coverage.xml
      testResultsJUnit: test-results/results.xml
  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: test-results/results.xml
  - task: PublishCodeCoverageResults@2
    condition: always()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: code-coverage/coverage.xml
      pathToSources: code/
  - script: |
      mkdir -p $(Build.ArtifactStagingDirectory)/mw_logs
      cp -r $(MATLAB_LOG_DIR)/* $(Build.ArtifactStagingDirectory)/mw_logs/ || true
      cp -v /tmp/mathworks_*.log $(Build.ArtifactStagingDirectory)/mw_logs/ || true
    condition: failed()
    shell: bash
    displayName: Gather MPM and MATLAB logs
  - task: PublishBuildArtifacts@1
    condition: failed()
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/mw_logs
      ArtifactName: mw-logs
    displayName: Publish MPM and MATLAB logs

  # As an alternative to RunMATLABTests, you can use RunMATLABCommand to execute a MATLAB script, function, or statement.
  # - task: RunMATLABCommand@1
  #   inputs:
  #     command: addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
