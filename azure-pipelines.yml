pool:
  vmImage: ubuntu-latest
variables:
  MATLAB_LOG_DIR: $(Build.SourcesDirectory)/logs
  MW_DIAGNOSTIC_DEST: file
  MW_DIAGNOSTIC_SPEC: cppmicroservices::framework.*=all;install.*=all;
  MW_VERBOSE_HTTPCLIENT_CORE: 1
steps:
  - task: InstallMATLAB@1
    inputs:
      products: Optimization_Toolbox Curve_Fitting_Toolbox
  - task: RunMATLABTests@1
    inputs:
      sourceFolder: code
      codeCoverageCobertura: code-coverage/coverage.xml
      testResultsJUnit: test-results/results.xml
  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: test-results/results.xml
  - task: PublishCodeCoverageResults@2
    condition: always()
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: code-coverage/coverage.xml
      pathToSources: code/
  - task: PublishBuildArtifacts@1
    condition: failed()
    inputs:
      PathtoPublish: $(MATLAB_LOG_DIR)
      ArtifactName: matlab-logs
    displayName: Publish MPM and MATLAB logs

  # As an alternative to RunMATLABTests, you can use RunMATLABCommand to execute a MATLAB script, function, or statement.
  # - task: RunMATLABCommand@1
  #   inputs:
  #     command: addpath('code'); results = runtests('IncludeSubfolders', true); assertSuccess(results);
